import os
import re
import asyncio
import logging
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("admin_bot")

# ---------- ENV ----------
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN or " " in BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ–±—ñ–ª–∏. –î–æ–¥–∞–π —É Railway ‚Üí Service ‚Üí Variables.")

ADMIN_USER_ID_RAW = (os.getenv("ADMIN_USER_ID") or "").strip()
try:
    ADMIN_USER_ID = int(ADMIN_USER_ID_RAW)
except Exception:
    ADMIN_USER_ID = None
    log.warning("‚ö†Ô∏è ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ /id –±–æ—Ç—É —ñ –¥–æ–¥–∞–π ADMIN_USER_ID —É Railway.")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# admin_msg_id -> user_id
ROUTE: Dict[int, int] = {}

# ---------- –¢–ï–ö–°–¢–ò / –ö–ù–û–ü–ö–ò ----------
WELCOME_TEXT = (
    "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –¢–∏ –≤ —á–∞—Ç—ñ –∑ –∞–¥–º—ñ–Ω–∞–º–∏\n"
    "üçìüîû SW–æ—ó –ª—é–¥–∏: –ö–ª—É–± –£–∫—Ä–∞—ó–Ω–∏ üîûüçìüá∫üá¶\n\n"
    "–í –ø–µ—Ä—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –≤–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n\n"
    "[–†–û–ó–ë–ê–ù] ‚Äî –∑–Ω—è—Ç–∏ –±–∞–Ω/–±–ª–æ–∫\n"
    "[–ü–û–ó–ê–ß–ï–†–ì–û–í–û] ‚Äî –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ–∑–∞ —á–µ—Ä–≥–æ—é\n"
    "[–†–ï–ö–õ–ê–ú–ê] ‚Äî –∑–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É –Ω–∞ –∫–∞–Ω–∞–ª—ñ\n"
    "[–Ü–ù–®–ï] ‚Äî —Å–ø—ñ–≤–ø—Ä–∞—Ü—è –∞–±–æ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤\n\n"
    "‚ö†Ô∏è –£–≤–∞–≥–∞: —Ñ–æ—Ä–º—É –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Å—é–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n"
    "üëâ –í—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞–π —É –≥–æ—Å—Ç—å–æ–≤–æ–º—É —á–∞—Ç—ñ, –∞ —Ç—É—Ç –ª–∏—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤."
)

PROJECTS = [
    ("üìù –ë–ª–æ–≥ –≤ Telegram", "https://t.me/joinchat/6jJS6kpFh6dhMDIy"),
    ("üìå –î–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å", "https://t.me/joinchat/AAAAAEtVgqgxtKQ-MxwMMw"),
    ("üå∂ SWOI-Shop", "http://t.me/swoishop"),
    ("‚úâÔ∏è –ì–æ—Å—Ç—å–æ–≤–∏–π —á–∞—Ç", "https://t.me/joinchat/pMIwfwXDcEQxNTNi"),
    ("üì∏ –ö–æ–Ω—Ç–µ–Ω—Ç-—á–∞—Ç", "https://t.me/+3gPoOsKhGF8zZWRi"),
    ("üìù Instagram –±–ª–æ–≥", "https://instagram.com/esmeralda_kissa"),
    ("üìΩÔ∏è –§—ñ–ª—å–º–æ—Ç–µ–∫–∞ –∫—ñ–Ω–æ", "https://t.me/swoi_kino"),
    ("üöï SW–æ—ó Taxi/Bla-blaCar", "https://t.me/+bfqsxj8G3-0xZjNi"),
    ("‚ò†Ô∏è –ß–∞—Ç-–∞–Ω–∞—Ä—Ö—ñ—è", "https://t.me/komenty_swoih"),
    ("‚úåÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∏–π —á–∞—Ç –≤ Signal",
     "https://signal.group/#CjQKIMLrwXMW3n_zvvA_vQsIh5wuSvKpb9SoDXD8KwOJJl7FEhA-5oVc-cdP00VFwuLF1IRG"),
    ("üíµ –î–æ–Ω–∞—Ç ¬´SW–æ—ó –õ—é–¥–∏ UA¬ª", "https://t.me/swoi_donate_bot"),
]

def start_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤", callback_data="show:projects")
    return kb.as_markup()

def projects_kb():
    kb = InlineKeyboardBuilder()
    for name, url in PROJECTS:
        kb.button(text=name, url=url)
    kb.adjust(1)
    return kb.as_markup()

# ---------- –£–¢–ò–õ–Ü–¢–ê: –≤–∏—Ç—è–≥–Ω—É—Ç–∏ UID –∑—ñ —à–∞–ø–∫–∏/—Ç–µ–∫—Å—Ç—É ----------
UID_PATTERNS = [
    re.compile(r"UID:\s*(\d+)"),
    re.compile(r"user_id\s*=\s*<code>(\d+)</code>"),
    re.compile(r"tg://user\?id=(\d+)"),
    re.compile(r"\bID[:=]\s*(\d+)\b"),
]
def extract_uid_from_text(text: str) -> Optional[int]:
    if not text:
        return None
    for pat in UID_PATTERNS:
        m = pat.search(text)
        if m:
            try:
                return int(m.group(1))
            except Exception:
                pass
    return None

# ---------- –ö–û–ú–ê–ù–î–ò / UI ----------
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    await m.answer(WELCOME_TEXT, reply_markup=start_kb())

@dp.callback_query(F.data == "show:projects")
async def show_projects(cb: CallbackQuery):
    try:
        await cb.answer()
    except Exception:
        pass
    await cb.message.answer("üìÇ –ù–∞—à—ñ –ø—Ä–æ—î–∫—Ç–∏:", reply_markup=projects_kb())

@dp.message(F.text == "/id")
async def cmd_id(m: Message):
    await m.reply(f"chat_id = <code>{m.chat.id}</code>\nuser_id = <code>{m.from_user.id}</code>")

# ---------- –ö–û–†–ò–°–¢–£–í–ê–ß ‚Üí –ê–î–ú–Ü–ù ----------
@dp.message(F.chat.type == "private")
async def from_user(m: Message):
    if ADMIN_USER_ID and m.from_user.id == ADMIN_USER_ID:
        return  # –∞–¥–º—ñ–Ω –ø–∏—à–µ –≤ –±–æ—Ç–∞ ‚Äî –Ω–µ —Å–ø—Ä–∏–π–º–∞—î–º–æ —è–∫ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è

    if ADMIN_USER_ID is None:
        await m.answer("‚ö†Ô∏è –ë–æ—Ç —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π: ADMIN_USER_ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")
        return

    u = m.from_user
    uid_line = f"UID: {u.id}"
    header = (
        "üì• <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n"
        f"üë§ {u.full_name} @{u.username or '‚Äî'}\n"
        f"üÜî <code>{u.id}</code>\n"
        f"{uid_line}\n"
        f"üîó <a href='tg://user?id={u.id}'>–≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</a>\n\n"
        "‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π <b>—Ä–µ–ø–ª–∞—î–º</b> –Ω–∞ <b>—à–∞–ø–∫—É</b> –∞–±–æ <b>–∫–æ–ø—ñ—é</b> ‚Äî —è –ø–µ—Ä–µ—à–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
    )

    head_msg = await bot.send_message(ADMIN_USER_ID, header, disable_web_page_preview=True)
    copy_msg = await m.copy_to(ADMIN_USER_ID)

    ROUTE[head_msg.message_id] = u.id
    ROUTE[copy_msg.message_id] = u.id

    log.info("Route saved: head_id=%s copy_id=%s -> user=%s",
             head_msg.message_id, copy_msg.message_id, u.id)

# ---------- –ê–î–ú–Ü–ù ‚Üí –ö–û–†–ò–°–¢–£–í–ê–ß (—É–ª—å—Ç—Ä–∞-–ª–æ—è–ª—å–Ω–∏–π —Ä–µ–ø–ª–∞–π) ----------
@dp.message((F.reply_to_message != None) & (F.from_user.id == ADMIN_USER_ID))
async def admin_reply_any_chat(m: Message):
    # –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±—É–¥—å-—è–∫–æ–≥–æ —Ä–µ–ø–ª–∞—é –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞
    log.info("Seen REPLY from admin: chat.id=%s from_user.id=%s reply_to_id=%s",
             m.chat.id, m.from_user.id,
             m.reply_to_message.message_id if m.reply_to_message else None)

    # 1) –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ROUTE
    reply_to_id = m.reply_to_message.message_id
    user_id = ROUTE.get(reply_to_id)

    # 2) —Ñ–æ–ª–±–µ–∫ ‚Äî –¥—ñ—Å—Ç–∞—î–º–æ UID —ñ–∑ —Ç–µ–∫—Å—Ç—É/caption –æ—Ä–∏–≥—ñ–Ω–∞–ª—É (—à–∞–ø–∫–∞ –º—ñ—Å—Ç–∏—Ç—å UID)
    if not user_id:
        src_text = (m.reply_to_message.text or "") + "\n" + (m.reply_to_message.caption or "")
        user_id = extract_uid_from_text(src_text)
        if user_id:
            log.info("Fallback UID parsed from replied message: %s", user_id)

    if not user_id:
        await m.reply(
            "‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å–∞–º–µ –Ω–∞ ¬´—à–∞–ø–∫—É¬ª –∑ —Ä—è–¥–∫–æ–º <b>UID: ‚Ä¶</b> "
            "–∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é <code>/to &lt;user_id&gt; &lt;—Ç–µ–∫—Å—Ç&gt;</code>."
        )
        log.warning("No user_id for admin reply. reply_to_id=%s", reply_to_id)
        return

    try:
        if m.text:
            await bot.send_message(user_id, f"‚úâÔ∏è <b>–í—ñ–¥ –∞–¥–º—ñ–Ω–∞</b>:\n{m.text}")
        else:
            await m.copy_to(user_id)  # —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫
        await m.reply("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.")
        log.info("Reply delivered to user %s", user_id)
    except Exception as e:
        log.exception("Send fail to user %s: %s", user_id, e)
        await m.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏. –ô–º–æ–≤—ñ—Ä–Ω–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ /start –∞–±–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.")

# ---------- –ê–î–ú–Ü–ù: —Ä—É—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å /to <uid> <—Ç–µ–∫—Å—Ç> ----------
@dp.message(
    (F.chat.type == "private") &
    (F.from_user.id == ADMIN_USER_ID) &
    F.text.regexp(r"^/to\s+(\d+)\s+(.+)", flags=re.S)
)
async def admin_manual_reply(m: Message):
    mobj = re.match(r"^/to\s+(\d+)\s+(.+)", m.text, flags=re.S)
    if not mobj:
        await m.reply("–§–æ—Ä–º–∞—Ç: <code>/to &lt;user_id&gt; &lt;–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è&gt;</code>")
        return
    uid = int(mobj.group(1))
    text = mobj.group(2).strip()
    try:
        await bot.send_message(uid, f"‚úâÔ∏è <b>–í—ñ–¥ –∞–¥–º—ñ–Ω–∞</b>:\n{text}")
        await m.reply("‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        log.info("Manual /to delivered to user %s", uid)
    except Exception as e:
        log.exception("Manual /to failed user %s: %s", uid, e)
        await m.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ —á–∞—Ç —ñ–∑ –±–æ—Ç–æ–º).")

# ---------- –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ (–Ω–µ—Ä–µ–ø–ª–∞–π) ----------
@dp.message((F.chat.type == "private") & (F.from_user.id == ADMIN_USER_ID))
async def any_admin_pm(m: Message):
    log.info("Admin PM (non-reply): chat.id=%s text=%r", m.chat.id, m.text)

# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    log.info("Start polling")
    me = await bot.get_me()
    log.info("Run polling for bot @%s id=%s - %r", me.username, me.id, me.first_name)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
