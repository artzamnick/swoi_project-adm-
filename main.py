import os
import re
import asyncio
import logging
from typing import Dict, Optional

from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("admin_bot")

# ---------- ENV ----------
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN or " " in BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ–±—ñ–ª–∏. –î–æ–¥–∞–π —É Railway ‚Üí Service ‚Üí Variables.")

ADMIN_USER_ID_RAW = (os.getenv("ADMIN_USER_ID") or "").strip()
try:
    ADMIN_USER_ID = int(ADMIN_USER_ID_RAW)
except Exception:
    ADMIN_USER_ID = None
    log.warning("‚ö†Ô∏è ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ /id –±–æ—Ç—É –π –¥–æ–¥–∞–π ADMIN_USER_ID —É Railway.")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# message_id —É —á–∞—Ç—ñ –∞–¥–º—ñ–Ω–∞ ‚Üí user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∂–∏–≤–µ –≤ –ø–∞–º'—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å—É)
ROUTE: Dict[int, int] = {}

# ---------- –¢–ï–ö–°–¢–ò / –ö–ù–û–ü–ö–ò ----------
WELCOME_TEXT = (
    "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –¢–∏ –≤ —á–∞—Ç—ñ –∑ –∞–¥–º—ñ–Ω–∞–º–∏\n"
    "üçìüîû SW–æ—ó –ª—é–¥–∏: –ö–ª—É–± –£–∫—Ä–∞—ó–Ω–∏ üîûüçìüá∫üá¶\n\n"
    "–í –ø–µ—Ä—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ –≤–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n\n"
    "[–†–û–ó–ë–ê–ù] ‚Äî –∑–Ω—è—Ç–∏ –±–∞–Ω/–±–ª–æ–∫\n"
    "[–ü–û–ó–ê–ß–ï–†–ì–û–í–û] ‚Äî –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–æ–∑–∞ —á–µ—Ä–≥–æ—é\n"
    "[–†–ï–ö–õ–ê–ú–ê] ‚Äî –∑–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É –Ω–∞ –∫–∞–Ω–∞–ª—ñ\n"
    "[–Ü–ù–®–ï] ‚Äî —Å–ø—ñ–≤–ø—Ä–∞—Ü—è –∞–±–æ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤\n\n"
    "‚ö†Ô∏è –£–≤–∞–≥–∞: —Ñ–æ—Ä–º—É –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Å—é–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.\n"
    "üëâ –í—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–∏—à–∞–π —É –≥–æ—Å—Ç—å–æ–≤–æ–º—É —á–∞—Ç—ñ, –∞ —Ç—É—Ç –ª–∏—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤."
)

PROJECTS = [
    ("üìù –ë–ª–æ–≥ –≤ Telegram", "https://t.me/joinchat/6jJS6kpFh6dhMDIy"),
    ("üìå –î–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å", "https://t.me/joinchat/AAAAAEtVgqgxtKQ-MxwMMw"),
    ("üå∂ SWOI-Shop", "http://t.me/swoishop"),
    ("‚úâÔ∏è –ì–æ—Å—Ç—å–æ–≤–∏–π —á–∞—Ç", "https://t.me/joinchat/pMIwfwXDcEQxNTNi"),
    ("üì∏ –ö–æ–Ω—Ç–µ–Ω—Ç-—á–∞—Ç", "https://t.me/+3gPoOsKhGF8zZWRi"),
    ("üìù Instagram –±–ª–æ–≥", "https://instagram.com/esmeralda_kissa"),
    ("üìΩÔ∏è –§—ñ–ª—å–º–æ—Ç–µ–∫–∞ –∫—ñ–Ω–æ", "https://t.me/swoi_kino"),
    ("üöï SW–æ—ó Taxi/Bla-blaCar", "https://t.me/+bfqsxj8G3-0xZjNi"),
    ("‚ò†Ô∏è –ß–∞—Ç-–∞–Ω–∞—Ä—Ö—ñ—è", "https://t.me/komenty_swoih"),
    ("‚úåÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∏–π —á–∞—Ç –≤ Signal",
     "https://signal.group/#CjQKIMLrwXMW3n_zvvA_vQsIh5wuSvKpb9SoDXD8KwOJJl7FEhA-5oVc-cdP00VFwuLF1IRG"),
    ("üíµ –î–æ–Ω–∞—Ç ¬´SW–æ—ó –õ—é–¥–∏ UA¬ª", "https://t.me/swoi_donate_bot"),
]

def start_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤", callback_data="show:projects")
    return kb.as_markup()

def projects_kb():
    kb = InlineKeyboardBuilder()
    for name, url in PROJECTS:
        kb.button(text=name, url=url)
    kb.adjust(1)
    return kb.as_markup()

UID_PATTERNS = [
    re.compile(r"UID:\s*(\d+)"),
    re.compile(r"user_id\s*=\s*<code>(\d+)</code>"),
    re.compile(r"tg://user\?id=(\d+)"),
    re.compile(r"\bID[:=]\s*(\d+)\b"),
]

def extract_uid_from_text(text: str) -> Optional[int]:
    if not text:
        return None
    for pat in UID_PATTERNS:
        m = pat.search(text)
        if m:
            try:
                return int(m.group(1))
            except Exception:
                continue
    return None

# ---------- –ë–ê–ó–û–í–Ü –ö–û–ú–ê–ù–î–ò ----------
@dp.message()
async def router(m: Message):
    """
    –Ñ–¥–∏–Ω–∏–π ¬´–Ω–∞–¥—ñ–π–Ω–∏–π¬ª —Ä–æ—É—Ç–µ—Ä:
    - –ª–æ–≤–∏–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    - –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ä–æ–∑–≥–∞–ª—É–∂—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    """
    # –ë–µ–∑–ø–µ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    chat_type = getattr(m.chat, "type", None)
    from_id = getattr(m.from_user, "id", None)

    # /start, /id, –∫–Ω–æ–ø–∫–∏
    if m.text == "/start":
        await m.answer(WELCOME_TEXT, reply_markup=start_kb())
        return
    if m.text == "/id":
        await m.reply(f"chat_id = <code>{m.chat.id}</code>\nuser_id = <code>{from_id}</code>")
        return

    # CallbackQuery —Ç—É—Ç –Ω–µ –ø—Ä–∏–ª–µ—Ç–∏—Ç—å, –∞–ª–µ —Ç—Ä–∏–º–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –æ–∫—Ä–µ–º–∏–π handler:
    # (–¥–∏–≤. –Ω–∏–∂—á–µ on_callback)

    # 1) –ö–û–†–ò–°–¢–£–í–ê–ß ‚Üí –ê–î–ú–Ü–ù (–ø—Ä–∏–≤–∞—Ç –Ω–µ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞)
    if chat_type == "private" and ADMIN_USER_ID and from_id != ADMIN_USER_ID:
        u = m.from_user
        uid_line = f"UID: {u.id}"  # —è–≤–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —Ñ–æ–ª–±–µ–∫—É
        header = (
            "üì• <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è</b>\n"
            f"üë§ {u.full_name} @{u.username or '‚Äî'}\n"
            f"üÜî <code>{u.id}</code>\n"
            f"{uid_line}\n"
            f"üîó <a href='tg://user?id={u.id}'>–≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</a>\n\n"
            "‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π <b>—Ä–µ–ø–ª–∞—î–º</b> –Ω–∞ <b>—à–∞–ø–∫—É –∞–±–æ –∫–æ–ø—ñ—é</b> –Ω–∏–∂—á–µ ‚Äî —è –ø–µ—Ä–µ—à–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
        )
        head_msg = await bot.send_message(ADMIN_USER_ID, header, disable_web_page_preview=True)
        copy_msg = await m.copy_to(ADMIN_USER_ID)

        ROUTE[head_msg.message_id] = u.id
        ROUTE[copy_msg.message_id] = u.id
        log.info("Route saved head=%s copy=%s -> user=%s", head_msg.message_id, copy_msg.message_id, u.id)
        return

    # 2) –ê–î–ú–Ü–ù ‚Üí –ö–û–†–ò–°–¢–£–í–ê–ß (–ø—Ä–∏–≤–∞—Ç –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –Ü —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)
    if chat_type == "private" and ADMIN_USER_ID and from_id == ADMIN_USER_ID and m.reply_to_message:
        reply_to_id = m.reply_to_message.message_id
        user_id = ROUTE.get(reply_to_id)

        if not user_id:
            # –§–æ–ª–±–µ–∫: —Å–ø—Ä–æ–±–∞ –¥—ñ—Å—Ç–∞—Ç–∏ UID –∑ —Ç–µ–∫—Å—Ç—É/–ø—ñ–¥–ø–∏—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ (—à–∞–ø–∫–∞)
            src_text = (m.reply_to_message.text or "") + "\n" + (m.reply_to_message.caption or "")
            user_id = extract_uid_from_text(src_text)
            if user_id:
                log.info("Fallback UID parsed: %s", user_id)

        if not user_id:
            await m.reply("‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å–∞–º–µ –Ω–∞ —à–∞–ø–∫—É/–∫–æ–ø—ñ—é –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–¥–µ —î —Ä—è–¥–æ–∫ ¬´UID: ‚Ä¶¬ª).")
            log.warning("No route/UID for admin reply. reply_to_id=%s", reply_to_id)
            return

        try:
            if m.text:
                await bot.send_message(user_id, f"‚úâÔ∏è <b>–í—ñ–¥ –∞–¥–º—ñ–Ω–∞</b>:\n{m.text}")
            else:
                await m.copy_to(user_id)  # —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫
            await m.reply("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.")
            log.info("Reply delivered to user %s", user_id)
        except Exception as e:
            log.exception("Send fail to user %s: %s", user_id, e)
            await m.reply("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏. –ú–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ —á–∞—Ç —ñ–∑ –±–æ—Ç–æ–º.")
        return

    # 3) –Ü–Ω—à–µ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç–∏—Ö–æ
    # (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏–≤–∞—Ç –∞–¥–º—ñ–Ω–∞ –±–µ–∑ —Ä–µ–ø–ª–∞—è, –∞–±–æ –≥—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏ —Ç–æ—â–æ)
    return

@dp.callback_query()
async def on_callback(cb: CallbackQuery):
    # —î–¥–∏–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî ¬´–°–ø–∏—Å–æ–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤¬ª
    if cb.data == "show:projects":
        try:
            await cb.answer()
        except Exception:
            pass
        kb = projects_kb()
        await cb.message.answer("üìÇ –ù–∞—à—ñ –ø—Ä–æ—î–∫—Ç–∏:", reply_markup=kb)

# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    print("‚úÖ Admin relay bot started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
